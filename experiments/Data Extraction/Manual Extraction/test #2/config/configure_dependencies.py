#!/usr/bin/env python3
"""
Configuration script to set up paths for Tesseract and Poppler on Windows
"""

import os
import sys
import subprocess
from pathlib import Path

def find_tesseract():
    """Find Tesseract installation"""
    possible_paths = [
        r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
        r"C:\Users\{}\AppData\Local\Tesseract-OCR\tesseract.exe".format(os.getenv('USERNAME')),
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    return None

def find_poppler():
    """Find Poppler installation"""
    possible_dirs = [
        r"C:\Program Files\poppler",
        r"C:\Program Files (x86)\poppler", 
        r"C:\poppler",
        r"C:\Tools\poppler",
    ]
    
    # Also check for installed poppler directories
    program_files = Path("C:/Program Files")
    if program_files.exists():
        for item in program_files.iterdir():
            if "poppler" in item.name.lower() and item.is_dir():
                bin_dir = item / "bin"
                if bin_dir.exists():
                    return str(bin_dir)
    
    for directory in possible_dirs:
        bin_path = os.path.join(directory, "bin")
        if os.path.exists(bin_path):
            return bin_path
    return None

def configure_tesseract():
    """Configure pytesseract to use the correct Tesseract path"""
    tesseract_path = find_tesseract()
    if tesseract_path:
        print(f"✓ Found Tesseract at: {tesseract_path}")
        
        # Test tesseract
        try:
            result = subprocess.run([tesseract_path, "--version"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f"✓ Tesseract version: {result.stdout.split()[1]}")
                return tesseract_path
            else:
                print(f"✗ Tesseract test failed: {result.stderr}")
        except Exception as e:
            print(f"✗ Error testing Tesseract: {e}")
    else:
        print("✗ Tesseract not found")
    return None

def configure_poppler():
    """Configure pdf2image to use the correct Poppler path"""
    poppler_path = find_poppler()
    if poppler_path:
        print(f"✓ Found Poppler at: {poppler_path}")
        
        # Test pdftoppm (main utility used by pdf2image)
        pdftoppm_path = os.path.join(poppler_path, "pdftoppm.exe")
        if os.path.exists(pdftoppm_path):
            try:
                result = subprocess.run([pdftoppm_path, "-h"], 
                                      capture_output=True, text=True, timeout=10)
                if "pdftoppm" in result.stderr.lower():
                    print("✓ Poppler utilities working")
                    return poppler_path
            except Exception as e:
                print(f"✗ Error testing Poppler: {e}")
        else:
            print(f"✗ pdftoppm.exe not found at {pdftoppm_path}")
    else:
        print("✗ Poppler not found")
    return None

def create_config_file(tesseract_path, poppler_path):
    """Create a configuration file with the paths"""
    config_content = f'''"""
Configuration paths for PDF processing dependencies
Auto-generated by configure_dependencies.py
"""

# Tesseract OCR path
TESSERACT_CMD = r"{tesseract_path}"

# Poppler utilities path  
POPPLER_PATH = r"{poppler_path}"
'''
    
    with open("dependency_config.py", "w") as f:
        f.write(config_content)
    
    print(f"✓ Created dependency_config.py with paths")

def main():
    print("Configuring PDF processing dependencies...")
    print("=" * 50)
    
    # Find and configure Tesseract
    tesseract_path = configure_tesseract()
    
    # Find and configure Poppler
    poppler_path = configure_poppler()
    
    if tesseract_path and poppler_path:
        create_config_file(tesseract_path, poppler_path)
        print("\n" + "=" * 50)
        print("✓ Configuration complete!")
        print("\nNext steps:")
        print("1. The paths have been saved to dependency_config.py")
        print("2. Run the updated test to verify everything works")
    else:
        print("\n" + "=" * 50)
        print("✗ Configuration incomplete!")
        if not tesseract_path:
            print("- Tesseract path not found")
        if not poppler_path:
            print("- Poppler path not found")

if __name__ == "__main__":
    main()