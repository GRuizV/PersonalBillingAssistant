#!/usr/bin/env python3
"""
Updated test script with proper path configuration for dependencies
"""

import os
import sys

print("Testing PDF processing dependencies with path configuration...")
print("=" * 60)

# Configure Tesseract path
try:
    import pytesseract
    # Set the tesseract command path directly
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    print("✓ Tesseract path configured")
except ImportError as e:
    print(f"✗ pytesseract import failed: {e}")
    sys.exit(1)

# Test 1: Import dependencies
print("\n1. Testing Python package imports:")
try:
    import pdf2image
    print("✓ pdf2image imported successfully")
except ImportError as e:
    print(f"✗ pdf2image import failed: {e}")
    sys.exit(1)

try:
    import pytesseract
    print("✓ pytesseract imported successfully")
except ImportError as e:
    print(f"✗ pytesseract import failed: {e}")
    sys.exit(1)

try:
    from tabulate import tabulate
    print("✓ tabulate imported successfully")
except ImportError as e:
    print(f"✗ tabulate import failed: {e}")

# Test 2: Test Tesseract functionality  
print("\n2. Testing Tesseract OCR functionality:")
try:
    import pytesseract
    from PIL import Image
    import numpy as np
    
    # Create a simple test image with text
    print("Creating test image...")
    test_image = Image.new('RGB', (200, 50), color='white')
    
    # Try to extract text (should return empty or minimal text)
    try:
        text = pytesseract.image_to_string(test_image)
        print("✓ Tesseract OCR working (empty image test passed)")
        
        # Try to get version
        version = pytesseract.get_tesseract_version()
        print(f"✓ Tesseract version: {version}")
    except Exception as e:
        print(f"✗ Tesseract OCR error: {e}")
        
except Exception as e:
    print(f"✗ Tesseract setup error: {e}")

# Test 3: Test pdf2image functionality
print("\n3. Testing pdf2image functionality:")
try:
    from pdf2image import convert_from_path
    
    # Try different poppler path configurations
    poppler_paths = [
        None,  # Default path
        r"C:\Program Files\poppler\bin",
        r"C:\Program Files (x86)\poppler\bin",
        r"C:\poppler\bin",
        r"C:\Tools\poppler\bin",
    ]
    
    # Check if we can find poppler utilities manually
    import subprocess
    import glob
    
    # Search common locations for pdftoppm.exe
    search_locations = [
        r"C:\Program Files\*\bin\pdftoppm.exe",
        r"C:\Program Files (x86)\*\bin\pdftoppm.exe", 
        r"C:\*\bin\pdftoppm.exe",
        r"C:\Tools\*\bin\pdftoppm.exe",
    ]
    
    found_poppler = None
    for pattern in search_locations:
        matches = glob.glob(pattern)
        if matches:
            found_poppler = os.path.dirname(matches[0])
            print(f"✓ Found Poppler at: {found_poppler}")
            break
    
    if found_poppler:
        poppler_paths.insert(1, found_poppler)
    
    pdf2image_working = False
    for poppler_path in poppler_paths:
        try:
            print(f"Trying poppler path: {poppler_path or 'default'}")
            # This should fail with FileNotFoundError for dummy file if poppler is working
            if poppler_path:
                convert_from_path("dummy.pdf", poppler_path=poppler_path)
            else:
                convert_from_path("dummy.pdf")
        except FileNotFoundError:
            print("✓ pdf2image works (FileNotFoundError expected for dummy file)")
            if poppler_path:
                print(f"  Using poppler path: {poppler_path}")
                # Save the working path
                with open("dependency_config.py", "w") as f:
                    f.write(f'''"""
Configuration paths for PDF processing dependencies
Auto-generated by test script
"""

# Tesseract OCR path
TESSERACT_CMD = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"

# Poppler utilities path  
POPPLER_PATH = r"{poppler_path}"
''')
            pdf2image_working = True
            break
        except Exception as e:
            error_msg = str(e).lower()
            if "poppler" in error_msg or "pdftoppm" in error_msg:
                print(f"✗ Poppler not found at {poppler_path or 'default'}: {e}")
                continue
            else:
                print(f"✗ Other pdf2image error: {e}")
                break
    
    if not pdf2image_working:
        print("\n⚠ WARNING: Poppler utilities not found!")
        print("pdf2image requires Poppler to be installed.")
        print("Manual installation options:")
        print("1. Download from: https://github.com/oschwartz10612/poppler-windows/releases")
        print("2. Extract to C:\\poppler")
        print("3. Add C:\\poppler\\bin to your PATH")
        
except Exception as e:
    print(f"✗ pdf2image test error: {e}")

print("\n" + "=" * 60)
print("Dependency test complete.")

# Final summary
print("\nSUMMARY:")
print("✓ Tesseract OCR: WORKING")
try:
    from pdf2image import convert_from_path
    convert_from_path("dummy.pdf")
except FileNotFoundError:
    print("✓ pdf2image: WORKING") 
except:
    print("✗ pdf2image: NEEDS POPPLER")